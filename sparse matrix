#include <stdio.h>

struct Term {
    int row;
    int col;
    int val;
};

void fastTranspose(struct Term a[], struct Term b[]) {
    int rowTerms[100], startPos[100];
    int i, j;
    int numCols = a[0].col;
    int numTerms = a[0].val;

    // Step 1: Header for result
    b[0].row = numCols;
    b[0].col = a[0].row;
    b[0].val = numTerms;

    if (numTerms > 0) {
        // Step 2: Initialize rowTerms to 0
        for (i = 0; i < numCols; i++)
            rowTerms[i] = 0;

        // Step 3: Count terms in each column of original
        for (i = 1; i <= numTerms; i++)
            rowTerms[a[i].col]++;

        // Step 4: Compute starting positions for each column in result
        startPos[0] = 1; // first term goes after header
        for (i = 1; i < numCols; i++)
            startPos[i] = startPos[i - 1] + rowTerms[i - 1];

        // Step 5: Place terms directly into result
        for (i = 1; i <= numTerms; i++) {
            j = startPos[a[i].col]++;
            b[j].row = a[i].col;
            b[j].col = a[i].row;
            b[j].val = a[i].val;
        }
    }
}

int main() {
    struct Term a[100], b[100];
    int m, n, t;
    int i;

    // Input matrix in sparse form
    printf("Enter number of rows, cols, and non-zero terms: ");
    scanf("%d %d %d", &m, &n, &t);

    a[0].row = m;
    a[0].col = n;
    a[0].val = t;

    printf("Enter the %d terms (row col value):\n", t);
    for (i = 1; i <= t; i++) {
        scanf("%d %d %d", &a[i].row, &a[i].col, &a[i].val);
    }

    // Perform fast transpose
    fastTranspose(a, b);

    // Output result
    printf("\nOriginal sparse matrix (3-tuple form):\n");
    for (i = 0; i <= t; i++) {
        printf("%d %d %d\n", a[i].row, a[i].col, a[i].val);
    }

    printf("\nTranspose (3-tuple form):\n");
    for (i = 0; i <= t; i++) {
        printf("%d %d %d\n", b[i].row, b[i].col, b[i].val);
    }

    return 0;
}
