#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
int top = -1;

void push(char c) {
    if (top == MAX - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = c;
}

char pop() {
    if (top == -1)
        return -1;
    else
        return stack[top--];
}

int precedence(char c) {
    if (c == '^')
        return 3;
    else if (c == '*' || c == '/')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return 0;
}

void reverse(char exp[]) {
    int n = strlen(exp);
    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }
}

void infixToPrefix(char infix[], char prefix[]) {
    char temp[MAX];
    int j = 0;
    reverse(infix);

    // Swap brackets
    for (int i = 0; i < strlen(infix); i++) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    // Convert to postfix
    for (int i = 0; i < strlen(infix); i++) {
        char c = infix[i];

        if (isalnum(c))
            temp[j++] = c;
        else if (c == '(')
            push(c);
        else if (c == ')') {
            while (top != -1 && stack[top] != '(')
                temp[j++] = pop();
            pop(); // remove '('
        } else {
            while (top != -1 && precedence(stack[top]) >= precedence(c))
                temp[j++] = pop();
            push(c);
        }
    }

    while (top != -1)
        temp[j++] = pop();

    temp[j] = '\0';
    reverse(temp);
    strcpy(prefix, temp);
}

// ------------------ MENU DRIVEN PART ------------------
int main() {
    char infix[MAX], prefix[MAX];
    int choice;

    do {
        printf("\n--- INFIX TO PREFIX CONVERSION ---\n");
        printf("1. Enter Infix Expression\n");
        printf("2. Convert to Prefix\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // clear input buffer

        switch (choice) {
            case 1:
                printf("Enter infix expression: ");
                gets(infix);
                break;

            case 2:
                if (strlen(infix) == 0) {
                    printf("Enter infix expression first!\n");
                } else {
                    infixToPrefix(infix, prefix);
                    printf("Prefix Expression: %s\n", prefix);
                }
                break;

            case 3:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 3);

    return 0;
}
